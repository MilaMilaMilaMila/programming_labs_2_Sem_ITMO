    int findWhiteOnCorner(Cube &cube, int z, int y, int x)
    {
        if(cube.cubik[z][y][x].front == 3)
        {
            return 1;
        }
        if(cube.cubik[z][y][x].top == 3)
        {
            return 2;
        }
        if(cube.cubik[z][y][x].button == 3)
        {
            return 3;
        }
        if(cube.cubik[z][y][x].right == 3)
        {
            return 4;
        }
        return 0;
    }

    bool isNeedTop(Cube &cube, int colour1, int colour2)
    {
        if((cube.cubik[0][2][2].top == colour1 || cube.cubik[0][2][2].top == colour2) &&
           (cube.cubik[0][2][2].front == colour1 || cube.cubik[0][2][2].front == colour2))
        {
            return true;
        }

        if((cube.cubik[0][2][2].top == colour1 || cube.cubik[0][2][2].top == colour2) &&
           (cube.cubik[0][2][2].right == colour1 || cube.cubik[0][2][2].right == colour2))
        {
            return true;
        }

        if((cube.cubik[0][2][2].right == colour1 || cube.cubik[0][2][2].right == colour2) &&
           (cube.cubik[0][2][2].front == colour1 || cube.cubik[0][2][2].front == colour2))
        {
            return true;
        }

        return false;
    }

    bool isNeedButton(Cube &cube, int colour1, int colour2)
    {
        if((cube.cubik[0][2][2].button == colour1 || cube.cubik[0][2][2].button == colour2) &&
           (cube.cubik[0][2][2].front == colour1 || cube.cubik[0][2][2].front == colour2))
        {
            return true;
        }

        if((cube.cubik[0][2][2].button == colour1 || cube.cubik[0][2][2].button == colour2) &&
           (cube.cubik[0][2][2].right == colour1 || cube.cubik[0][2][2].right == colour2))
        {
            return true;
        }

        if((cube.cubik[0][2][2].right == colour1 || cube.cubik[0][2][2].right == colour2) &&
           (cube.cubik[0][2][2].front == colour1 || cube.cubik[0][2][2].front == colour2))
        {
            return true;
        }

        return false;
    }

    void putWhiteCornersCorrect(Cube &cube, Interface &user)
    {
        user.turnPlane(cube, "putOnTheLeftSide");
        user.turnPlane(cube, "putOnTheLeftSide");
        std::cout << "put on left side x2" << std::endl;
        user.showCubik(cube);

        for(int i = 0; i < 4; i++)
        {
            int colour1 = cube.cubik[1][2][1].front;
            int colour2 = cube.cubik[1][1][2].right;

            for(int j = 0; j < 4; j++)
            {
                if(findWhiteOnCorner(cube, 2, 2, 2) != 0 && isNeedButton(cube, colour1, colour2))
                {
                    user.turnPlane(cube, "pifPaf");
                    std::cout << "pifPaf" << std::endl;
                    user.showCubik(cube);
                    break;
                }
                else
                {
                    user.turnPlane(cube, "perehvatLeft");
                    std::cout << "perehvatLeft" << std::endl;
                    user.showCubik(cube);
                }
            }

            while(!(cube.cubik[1][2][1].front == colour1 && cube.cubik[1][1][2].right == colour2))
            {
                user.turnPlane(cube, "perehvatLeft");
                std::cout << "perehvatLeft" << std::endl;
                user.showCubik(cube);
            }

            for(int j = 0; j < 4; j++)
            {
                switch (isNeedTop(cube, colour1, colour2)) {
                    case 1:
                        for(int k = 0; k < 5; k++)
                        {
                            user.turnPlane(cube, "pifPaf");
                            std::cout << "pifPaf" << std::endl;
                            user.showCubik(cube);
                        }
                        break;
                    case 2:
                        for(int k = 0; k < 3; k++)
                        {
                            user.turnPlane(cube, "pifPaf");
                            std::cout << "pifPaf" << std::endl;
                            user.showCubik(cube);
                        }
                        break;
                    case 4:
                        user.turnPlane(cube, "pifPaf");
                        std::cout << "pifPaf" << std::endl;
                        user.showCubik(cube);
                        break;
                    case 0:
                        user.turnPlane(cube, "topLeft");
                        std::cout << "topLeft" << std::endl;
                        user.showCubik(cube);
                        break;
                }
            }

            user.turnPlane(cube, "perehvatLeft");
            std::cout << "perehvatLeft" << std::endl;
            user.showCubik(cube);
        }

    }